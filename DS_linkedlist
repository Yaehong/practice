# learned implementing the singly-linked list and a doubly-linked list.
# This includes inserting and deleting nodes according to their value and position, sorting the list exc.

#include <stdbool.h>
#include <assert.h>
#include <stdlib.h>
#include <time.h>
#include "linkedList.h"

// instantiates a node 
pNode newNode(int item) {
	pNode aNode = (pNode)malloc(sizeof(node));
	assert(aNode != NULL);
	aNode->item = item;
	aNode->next = NULL;
	return aNode;
}

// instantiates a new node, sets item and next
pNode newNodeX(pNode next, int item) {
	pNode aNode = (pNode)malloc(sizeof(node));
	assert(aNode != NULL);
	aNode->item = item;
	aNode->next = next;
	return aNode;
}

/** frees nodes in a linked list */
void freeNode(pNode headNode) {
	pNode now= headNode;
	while (now != NULL) {
		pNode before = now;
		now = now->next;
		free(before);
	}
}

/** frees a linked list */
void freeList(pList p) {
	if (!isEmptyList(p)) {
		freeNode(p->head);
		free(p);
	}
}

pList newList() {
	pList aList = (pList)malloc(sizeof(list));
	assert(aList != NULL);
	aList->head = NULL;
	aList->tail = NULL;
	aList->size = 0;
	return aList;
}

/** returns true if empty, false if no empty */
bool isEmptyList(pList p) { return p == NULL || p->head == NULL; }

int size(pList p) { return p->size; }

int getSize(pList p) {
	if (isEmptyList(p)) return 0;
	int count = 0;
	for (pNode x = p->head; x != NULL; x = x->next) count++;
	return count;
}

// deletes the first node in the list
void deleteFront(pList p) {
	DPRINT(printf(">deleteFront\n"));
	if (isEmptyList(p)) return;    // nothing to delete

	pNode curr = p->head;
	pNode aNode = curr->next;
	free(curr);
	p->head = aNode;
	p->size--;

	if (p->size == 0) p->tail = NULL;

	DPRINT(printf("<deleteFront\n"));
}

// deletes the last node in the list, O(n)
void deleteLast(pList p) {
	DPRINT(printf(">deleteLast(size=%d)\n", p->size));
	if (isEmptyList(p)) return;    // nothing to delete

	pNode start = p -> head;
	pNode fin = start;

	while (start->next != NULL) {
		fin = start;
		start = start->next;
	}

	free(start);
	p->size--;

	if (start == fin) {
		p->head = NULL;
		p->tail = NULL;
	}
	p->tail = fin;
	(p->tail)->next = NULL;

	DPRINT(printf("<deleteLast(size=%d)\n", p->size));
}


// deletes a node at the end, O(1) 
// this is a challenging problem. 
void deleteAtTail(pList p) {
	DPRINT(printf("<deleteAtTail\n"));

	printf("Not implemented\n");

	DPRINT(printf("<insertAtTail(size=%d)\n", p->size));
}

// deletes the node by the item 
void deleteNode(pList p, int item) {
	DPRINT(printf(">deleteNode(item=%d)\n", item));
	if (isEmptyList(p)) return;    // nothing to delete

	pNode curr = p->head;
	pNode fin = curr;
	// if item to delete is the head(first) node
	if (curr->item == item) {
		deleteFront(p);
	}
	else {  // search for the item to delete in the list
		while (curr->next != NULL) {
			fin = curr;
			curr = curr->next;
			if (curr->item == item)
				break;
		}
		if (curr == fin) {
			free(curr);
			p->tail = NULL;
			p->head = NULL;
			p->size--;
		}
		else if (curr->item == item && curr->next == NULL) {
			free(curr);
			fin->next = NULL;
			p->tail = fin;
			p->size--;
		}
		else if (curr->item == item) {
			fin->next = curr->next;
			free(curr);
			p->size--;
		}
		else {
			printf("\n We can't delete the item because there is no such item");
		}
	}
	DPRINT(printf("<deleteNode(size=%d)\n", p->size));
}


// delete N nodes at the end, O(1) 
void deleteAtTailN(pList p) {
	DPRINT(printf(">deleteAtTailN(N=%d)\n", size(p)));

	srand((unsigned)time(NULL));
	for (int i = size(p); i > 0; i--) {
		printf("\r\tdeleting in [%7d]", i);
		deleteAtTail(p);
	}
	printf("\n");
	DPRINT(printf("<deleteAtTailN(size=%d)\n", p->size));
}

// delete N nodes at the end, O(N) 
void deleteAtLastN(pList p) {
	DPRINT(printf(">deleteAtLastN(N=%d)\n", size(p)));

	for (int i = size(p); i > 0; i--) {
		printf("\r\tdeleting in [%7d]", i);
		deleteLast(p);
	}
	printf("\n");
	DPRINT(printf("<deleteAtLastN(size=%d)\n", p->size));
}

// inserts a node at front of linked list 
void insertFront(pList p, int item) {
	DPRINT(printf(">insertFront(item=%d)\n", item));
	p->head = newNodeX(p->head, item);
	p->size++;
	if (p->size == 1) p->tail = p->head;	// only one node
	DPRINT(printf("<insertFront(size=%d)\n", p->size));
}

// inserts a node at the last of linked list 
void insertLast(pList p, int item) {
	DPRINT(printf(">insertLast(item=%d)\n", item));

	pNode current = p->head;
	pNode backup = current;
	if (p->head == NULL) {
		p->head = newNodeX(NULL, item);
		p->size++;
	}
	else {
		while (current->next != NULL) {
			backup = current;
			current = current->next;
		}
		current->next = newNodeX(NULL, item);
		p->tail = current->next;
		p->size++;
	}
	if (p->maxPrintSize == 1)
		p->tail = p->head;
	DPRINT(printf("<insertLast(size=%d)\n", p->size));
}


/** // inserts a node at the end, O(1) */
void insertAtTail(pList p, int item) {
	DPRINT(printf("<insertAtTail(item=%d)\n", item));
	if (isEmptyList(p)) {
		insertFront(p, item);
	}
	else {
		pNode Last = p->tail;
		Last->next = newNodeX(NULL, item);
		Last = Last->next;
		p->tail = Last;
		p->size++;
	}
	DPRINT(printf("<insertAtTail(size=%d)\n", p->size));
}

// inserts N nodes at the end, O(1) 
void insertAtTailN(pList p, int N) {
	DPRINT(printf("<insertAtTailN(N=%d)\n", N));
	
	for (int i = 0; i < N; i++) {
		insertAtTail(p, rand() & 501);
	}
	DPRINT(printf("<insertAtTailN(size=%d)\n", p->size));
}

/** inserts a node in sorted order */
void insertSorted(pList p, int item) {
	DPRINT(printf("<insertSorted(item=%d)\n", item));
    // there is no item or item is smaller than first item
	pNode head = p->head;
	pNode tail = head;

	if (head == NULL || item < head->item) {
		insertFront(p, item);
	}
	else { // look for the place to insert
		while (head->item <= item && head->next != NULL) {
			tail = head;
			head = head->next;
		}
		if (head->next == NULL) {
			insertLast(p, item);
		}
		else {
			tail->next = newNodeX(head, item);
			p->size++;
		}
	}

	DPRINT(printf("<insertSorted(size=%d)\n", p->size));
}

// inserts N number of nodes in sorted order 
void insertSortedN(pList p, int N) {
	DPRINT(printf("<insertSortedN(N=%d)\n", N));

	srand((unsigned)time(NULL));
	for(int i=0; i<N; i++) {
		insertSorted(p, rand() & 501);
	}

	DPRINT(printf("<insertSortedN(total size=%d)\n", p->size));
}

// inserts a node at an index, 0 for front 
void insertIndex(pList p, int item, int index) {
	if (index < 0) return;

	pNode current = p->head;
	pNode backup = current;

	if (index == 0)
		insertFront(p, item);
	else if (index > p->size)
		printf("index(%d) is out of bound[0...%d]\n", index, p->size);
	else {
		for (int i = 0; i < index; i++) {
			backup = current;
			current = current->next;
		}
		backup->next = newNodeX(current, item);
		p->size++;
	}
}

/** returns index of item if found, -1 if not */
int search(pList p, int item) {
	int index = 0;

	pNode curr = p->head;
	do {
		if (curr->item == item) {
			return index;
		}
		index++;
		curr = curr->next;
	} while (curr != NULL);
	return -1;
}

/** shows all items in linked list */
void traverse(pList p) {
	if (isEmptyList(p)) {
		printf("\n\tThe list is empty.\n");
		return;
	}
	int *size = (int*)malloc(sizeof(int)*(p->size));
	int maxprint = p->maxPrintSize;
	int mag = maxprint / 2;
	int listSize = p->size;
	int i = 0;

	pNode curr = p->head;

	while (curr != NULL) {
		size[i] = curr->item;
		curr = curr->next;
		i++;
	};

	if (listSize > maxprint) {
		for (int j = 0; j < mag; j++)
			printf(" %d ->", size[j]);
		printf(" ...  ");
		for (int k = mag; k > 1; k--)
			printf("%d -> ", size[listSize - k]);
		printf(" %d ", size[listSize - 1]);
	}
	else {
		for (int h = 0; h < listSize; h++) {
			if (h == listSize - 1)
				printf(" %d", size[h]);
			else
				printf("%d -> ", size[h]);
		}
	}
	printf("\n");
}

// verify size and tail information in linked list header
bool verify(pList p) {
	bool verified = true;

	if (isEmptyList(p)) {
		if (p->size != 0) {
			printf("\tIts length(%d) should be 0.", p->size);
			verified = false;
		}
		if (p->tail != NULL) {
			printf("\tIts tail should be NULL.");
			verified = false;
		}
		return verified;
	}

	// Count the number of nodes and get the last node in the list. 
	pNode curr, prev;
	int nodeCount = 0;
	curr = p->head;
	do {
		prev = curr;
		++nodeCount;
		curr = curr->next;
	} while (curr != NULL);

	if (p->size != nodeCount) {
		printf("\tThe size(%d) in the list is different from the actual node count(%d).\n",
			p->size, nodeCount);
		verified = false;
	}
	if (prev != p->tail) {
		printf("\tThe tail is different from the actual tail of the list.\n");
		verified = false;
	}

	return verified;
}
