# Ackermann's Function A 는 다음과 같이 정의된다. 이를 참고하여 Ackermann( i, j ) 를 재귀 호출 함수로 만들고, 이 함수를 이용하여 Ackermann(0,0) 에서 Ackermann(3,3)까지 12개 값을 구하라.
# Ackermann's Function A(i,j) A(0, j) = j+1 i = 0 이고, j ≥ 0 인 경우 A(i, 0) = A(i-1, 1) i > 0 이고 j = 0 인 경우 A(i, j) = A(i-1, A(i, j-1)) i 와 j 모두 0보다 큰 경우


void problem3(){
    int a, b, n, dumb, finish;
    printf("Ackermann Function에서 i의 값과 j의 값에 공통으로 넣을 숫자를 입력하세요. : ");
    scanf("%d", &n);
    for(a=0;a<=n;a++){
        for(b=0;b<=n;b++){
            printf("Ackermann(%d,%d)= %d\n", a, b, Ackermann(a,b));
        }
    }
}

int Ackermann(int i, int j){
    if(i==0 && j>=0){
        return j+1;
    }
    if(i>0 && j==0){
        return Ackermann(i-1,1);
    }
    if(i>0 && j>0){
        return Ackermann(i-1,Ackermann(i,j-1));
    }
}


# Ackermann's Function A 는 다음과 같이 정의된다. 이를 참고하여 Ackermann( i, j ) 를 재귀 호출 함수로 만들고, 이 함수를 이용하여 Ackermann(0,0) 에서 Ackermann(3,3)까지 12개 값을 구하라.
# Ackermann's Function A(i,j) A(0, j) = j+1 i = 0 이고, j ≥ 0 인 경우 A(i, 0) = A(i-1, 1) i > 0 이고 j = 0 인 경우 A(i, j) = A(i-1, A(i, j-1)) i 와 j 모두 0보다 큰 경우


void problem4(){
    int i, num1,num2;
    printf("숫자 2개를 입력하시오. : ");
    scanf("%d %d", &num1, &num2);
    printf("%d의 %d승은 %d입니다.", num1, num2, power(num1,num2));
}

int power( int n, int a ){
    if(a==0) return 1;
    if(a==1) return n;
    if(a>1 && a%2==0){
        return power(n,(a/2))*power(n,(a/2));
    }
    if(a>1 && a%2==1){
        return power(n,(a/2))*power(n,(a/2))*n;
    }
}


# 다음 구조체를 이용하여 2개의 좌표 데이터를 입력받아 이를 출력하고, 두 좌표 사이의 거리를 출력하라. struct point{ float x; // x좌표 값 float y; // y좌표 값 }; 단, 두 좌표 사이의 거리 계산은 별도의 함수를 만들어 사용하되, 계산 방법은 (x값의 차이)2+(y값의 차 이)2 의 제곱근이다. 계산할 때에 sqrt()와 pow()함수를 사용하라. 


struct point{
    float x;
    float y;
};

void problem3(){
    struct point p1, p2;
    printf("첫번째 좌표의 x값은?");
    scanf("%f", &p1.x);
    printf("첫번째 좌표의 y값은?");
    scanf("%f", &p1.y);
    printf("두번째 좌표의 x값은?");
    scanf("%f", &p2.x);
    printf("두번째 좌표의 y값은?");
    scanf("%f", &p2.y);
    printf("두 좌표 사이의 거리는 %.1f입니다.", calc_distance(p1,p2));
}

float calc_distance(struct point p1, struct point p2){
    return sqrt(pow((p2.x - p1.x),2.0)+pow((p2.y-p1.y),2.0));
}


# 다음 구조체를 이용하여 직사각형 2개의 좌상점의 좌표값(x, y)와 우하점의 좌표값(x, y)을 입력받은 후에 2개의 직사각형이 평면좌표 상에서 겹치는 부분이 있는지의 여부를 출력하라. struct rectangle{ int x1, y1; // 좌상점 좌표값 (왼쪽 위 모서리) int x2, y2; // 우하점 좌표값 (오른족 아래 모서리) }; 단, 2개의 직사각형이 겹치는 지를 검사하는 다음 함수를 별도로 만들어 사용하라.


struct rectangle{
    int x1, y1;
    int x2, y2;
};

void problem5(){
    struct rectangle r1, r2;
    printf("첫번째 직사각형의 좌상점 좌표값(x,y)은?");
    scanf("%d %d", &r1.x1, &r1.y1);
    printf("첫번째 직사각형의 우하점 좌표값(x,y)은?");
    scanf("%d %d", &r1.x2, &r1.y2);
    printf("두번째 직사각형의 좌상점 좌표값(x,y)은?");
    scanf("%d %d", &r2.x1, &r2.y1);
    printf("두번째 직사각형의 우하점 좌표값(x,y)은?");
    scanf("%d %d", &r2.x2, &r2.y2);
    if(check_overlap(r1,r2) == 0){
        printf("두 직사각형은 겹치지 않습니다.");
    }
    if(check_overlap(r1,r2) == 1){
        printf("두 직사각형은 겹칩니다.");
    }
}

int check_overlap(struct rectangle r1, struct rectangle r2){
    if(r1.x2<r2.x1 || r1.x1>r2.x2){
        return 0;
    }
    else if(r1.y2>r2.y1 || r1.y1<r2.y2){
        return 0;
    }
    else return 1;
}


# 어떤 식당의 메뉴판이 다음과 같이 구성되어 있을 때, 다음 5개의 메뉴를 프로그램 안에서 구조체 배열에 저장한 후,
# 이를 화면에 출력하라. 그리고 이 내용을 menu.txt에 저장하라. 메뉴번호 메뉴이름 원산지 1인분 가격 -------------------------------------------------------------   1     삼겹살 국내산 9000   2 갈비살 미국산 15000   3 꽃등심 국내산 30000   4 양념갈비 호주산 25000   5 차돌박이 국내산 28000 
# struct menu{ int no; // 메뉴번호 char name[20]; // 메뉴명 char madein[20]; // 원산지 int price; // 가격 } 


struct menu{
    int no;
    char name[20];
    char madein[20];
    int price;
};

void problem6(){
    FILE *fp;
    struct menu mymenu[5] = {
        {1,"삼겹살","국내산",9000},
        {2,"갈비살","미국산", 15000},
        {3,"꽃등심","국내산", 30000},
        {4,"양념갈비","호주산",25000},
        {5,"차돌박이","국내산", 28000},
    };
    printf("메뉴번호 메뉴이름 원산지 1인분 가격\n");
    for(int i=0;i<5;i++){
        printf("%d %s %s %10d\n", mymenu[i].no, mymenu[i].name, mymenu[i].madein, mymenu[i].price);
    }
    fp = fopen("menu.txt","wt");
    for(int j=0;j<5;j++){
        fprintf(fp,"%d\t %s\t %s\t %d\n", mymenu[j].no, mymenu[j].name, mymenu[j].madein, mymenu[j].price);
    }
    fclose(fp);
}
